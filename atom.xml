<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lavrton]]></title>
  <link href="http://lavrton.github.io/atom.xml" rel="self"/>
  <link href="http://lavrton.github.io/"/>
  <updated>2016-01-28T09:50:48+00:00</updated>
  <id>http://lavrton.github.io/</id>
  <author>
    <name><![CDATA[Anton Lavrenov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Konva Overview]]></title>
    <link href="http://lavrton.github.io/blog/2015/04/03/konva-overview/"/>
    <updated>2015-04-03T01:00:03+00:00</updated>
    <id>http://lavrton.github.io/blog/2015/04/03/konva-overview</id>
    <content type="html"><![CDATA[<p>As I maintain Konva project (2d canvas framework) I wrote large post with overview of all main feautures.
The post is published on Konva site. See <a href="http://konvajs.github.io/docs/overview.html">http://konvajs.github.io/docs/overview.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Notified When New Version of Lib Is Out]]></title>
    <link href="http://lavrton.github.io/blog/2015/03/10/get-notified-when-new-version-of-lib-is-out/"/>
    <updated>2015-03-10T01:00:05+00:00</updated>
    <id>http://lavrton.github.io/blog/2015/03/10/get-notified-when-new-version-of-lib-is-out</id>
    <content type="html"><![CDATA[<p>I really like to track new versions of my favorite libraries or frameworks.
Usually when new version of popular project (such as <code>React</code>, <code>Backbone</code>) is out you will know it from everywhere: reddit, hacker news, tweets, etc.</p>

<p>But you may miss new version for less popular framework.
Or if you are offline a while.</p>

<h2>How to get notified?</h2>

<p>Do you know that github supports feed for new tags and releases?</p>

<p>You can use this url for new tags:</p>

<p><code>https://github.com/{user}/{repository}/tags.atom</code></p>

<p>For example backbone feed: <a href="https://github.com/jashkenas/backbone/tags.atom">https://github.com/jashkenas/backbone/tags.atom</a></p>

<p>or this url for new releases (if contributors make releases in github way) otherwise it is the same as &ldquo;tags&rdquo; feed:</p>

<p><code>https://github.com/{user}/{repository}/releases.atom</code></p>

<p>For examle look at phaser.js feed <a href="https://github.com/photonstorm/phaser/releases.atom">https://github.com/photonstorm/phaser/releases.atom</a></p>

<h3>Want to get notified via email?</h3>

<p>We have a solution with <a href="http://ifttt.com/">ifttt.com</a>.</p>

<p>See my example recipe: <a href="https://ifttt.com/recipes/267571-email-me-when-new-version-of-konva-js-is-out">Konva.js new version notification</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Backbone for Html5 Canvas]]></title>
    <link href="http://lavrton.github.io/blog/2014/11/05/using-backbone-for-html5-canvas/"/>
    <updated>2014-11-05T01:10:32+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/11/05/using-backbone-for-html5-canvas</id>
    <content type="html"><![CDATA[<h2>1 Description of the problem</h2>

<p>While developing mind map application Slash System,
I chose Backbone as the main library to build an application.
The mind map is drawn into <code>&lt;canvas&gt;</code> element using various primitives.
We chose KineticJS (now it is <a href="http://konvajs.github.io/">Konva</a>) library to work with canvas,
as it perfectly supports events for objects on the canvas.</p>

<p>In order to match the architecture of Backbone, all work with canvas
(or rather with the object instances of <code>Konva</code>) occurred in <code>Backbone.View</code> instances:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Node</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">layer</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">bindEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">rect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Konva</span><span class="p">.</span><span class="nx">Rect</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">x</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">y</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">width</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">height</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">fill</span> <span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">id</span> <span class="o">:</span> <span class="s1">&#39;rect&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">rect</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">bindEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;on rectangle clicked&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// etc ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2 The problem</h2>

<p>But Backbone.View is designed to work with the DOM elements,
and this approach generates unnecessary div objects and also announcing of events
in a declarative style (<a href="http://backbonejs.org/#View-delegateEvents">http://backbonejs.org/#View-delegateEvents</a>) is not avalible.</p>

<h3>3 The solution</h3>

<p>I made plugin <a href="https://github.com/lavrton/backbone.konvaview">Backbone.KonvaView</a>,
which allows to work with objects on the canvas (via Konva) in the same style as the normal
<code>Backbone.View</code> works with DOM. An example of how the code looks now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">KineticView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">initialize</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">layer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">nodeType</span> <span class="o">:</span> <span class="s1">&#39;Rect&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">attributes</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">x</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">y</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">width</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">fill</span> <span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">id</span> <span class="o">:</span> <span class="s1">&#39;rect&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// setup events</span>
</span><span class='line'>    <span class="nx">events</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click&#39;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;on rectangle clicked&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">render</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyView</span><span class="p">({</span><span class="nx">layer</span><span class="o">:</span><span class="nx">layer</span><span class="p">});</span>
</span><span class='line'><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This plugin works almost the same way as <code>Backbone.View</code>,
but only for Konva objects. By analogy tests were adapted from Backbone.View.</p>

<p>Slightly more complex live example can be found here: <a href="http://jsbin.com/fekex/5/edit?js,output">http://jsbin.com/fekex/5/edit?js,output</a></p>

<p>Plugin code: <a href="https://github.com/lavrton/backbone.konvaview">https://github.com/lavrton/backbone.konvaview</a></p>

<p>Perhaps a similar solution can be easily built for such canvas libraries: Easeljs, FabricJS etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Tracker App]]></title>
    <link href="http://lavrton.github.io/blog/2014/10/14/how-to-use-tracker-app/"/>
    <updated>2014-10-14T04:12:29+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/10/14/how-to-use-tracker-app</id>
    <content type="html"><![CDATA[<p>Currently (October 2014) the <a href="http://trackerio.herokuapp.com/">Tracker</a> application has 2 main modules:</p>

<ul>
<li>Daily purposes</li>
<li>Don&rsquo;t break the chain</li>
</ul>


<p>I am going to describe in details how I am using the app with this modules.</p>

<h1>Daily purposes</h1>

<p>Each day in the morning I write my ~10 life purposes. They might be long-term and short-term as well.
Examples:</p>

<ul>
<li>Finish One Month project</li>
<li>Financial comfort - make cool project</li>
<li>Have nice body - workouts</li>
</ul>


<p>As you can see in two last examples I try to write purposes in this pattern: &ldquo;What do I want - What should I do&rdquo;. In better and more common variant pattern should be: &ldquo;What do I want to get - What can I give&rdquo;. &ldquo;Get&rdquo; - for yourself, &ldquo;Give&rdquo; - to the world. Remember, this is not tasks! In my opinion it is better to write tasks in the evening.</p>

<p>When you finish with purposes you may &ldquo;forget&rdquo; about them, probably you will not need obtained list any more. Every day you should write purposes again and again. You should not look at the old purpose lists when you are writing a new one. While writing purposes you have to think of &ldquo;what do you want&rdquo; from your life and in such way you are targeting the main direction of your life.</p>

<p>Conditions are changing every day, so your purposes can be changed too (formulation, time limit, etc).</p>

<h1>Don&rsquo;t break the chain</h1>

<p>This is very popular technique. You can read the full description here <a href="http://lifehacker.com/281626/jerry-seinfelds-productivity-secret">http://lifehacker.com/281626/jerry-seinfelds-productivity-secret</a>.</p>

<p>Currently I have three chains:</p>

<ol>
<li>Fitness</li>
<li>Reading (~ 5 pages of foreign book)</li>
<li>Writing (any article/image/video into personal diary)</li>
</ol>


<p>Also I have included &ldquo;purposes&rdquo; module as one of chains.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 44 - Done!]]></title>
    <link href="http://lavrton.github.io/blog/2014/10/08/one-month-app-day-44-finish/"/>
    <updated>2014-10-08T03:51:41+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/10/08/one-month-app-day-44-finish</id>
    <content type="html"><![CDATA[<h1>Finishing project</h1>

<p>Now I am finishing &ldquo;One Month Project&rdquo;.</p>

<p>I have to remove &ldquo;bestOf&rdquo; module from application because there are TOO MANY thing should be implemented there. But I am already late.
So my application has two main modules:</p>

<ol>
<li>Chain</li>
<li>Daily purposes</li>
</ol>


<h1>Conclusion</h1>

<p>At the start I was really inspired by my application. And I thought that I had a lot of time. But I hadn&rsquo;t. I didn&rsquo;t know how much work should I do with all modules.</p>

<p>Thoughts:</p>

<ol>
<li>One month - is too long interval for such project. I mean it is better to have a short interval - and it will be much easier to setup tasks and deadlines.</li>
<li><code>React</code> is awesome! It is really different approach for building UI instead I was using before.</li>
<li><code>Sails</code> is awesome too! I have set up realtime REST API too fast.</li>
</ol>


<p>Now project is working there: <a href="http://trackerio.herokuapp.com/">http://trackerio.herokuapp.com/</a></p>

<p>Source code is there: <a href="https://github.com/lavrton/tracker">https://github.com/lavrton/tracker</a></p>

<p>I will not stop to develop the project. I still want to implement &ldquo;bestOf&rdquo; module.</p>

<h1>Using</h1>

<p>Right now I am using application it this way:</p>

<ol>
<li>After breakfast I sit down at the computer and write ~10 long-term and short-term purposes such as: &ldquo;Finish One Month project&rdquo;, &ldquo;Visit Europe country&rdquo;, &ldquo;financial comfort - make cool project&rdquo;, &ldquo;Have nice body - workouts&rdquo;. As you can see in two last examples I try to write purposes in this pattern: &ldquo;What I want - What should I do&rdquo;.</li>
<li>Before sleep I mark &ldquo;chains&rdquo; I have done.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 38 - Almost Done]]></title>
    <link href="http://lavrton.github.io/blog/2014/10/02/one-month-app-day-38-almost-done/"/>
    <updated>2014-10-02T01:29:20+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/10/02/one-month-app-day-38-almost-done</id>
    <content type="html"><![CDATA[<p>A I have a little bit failed with time management.</p>

<p>I made a break for two weeks while developing project. I thought that I had a lot of time. At the 25th of September (before last day) I thought that 2 last days are perfect for finishing the main work. But now it is the 38th day of my project. And I still think the same way. Just 2 more days to make work done. Oops&hellip;.</p>

<p>Currently application looks this way:</p>

<p><img class="center" src="http://lavrton.github.io/images/dash-3.png" title="" ></p>

<p>List of inputs is a new &ldquo;Purposes module&rdquo;. With this technique I have to write ~10 life purposes (long-term and short-term as well).</p>

<p>There are 2 tasks to do:</p>

<ul>
<li>Implement chooser for &ldquo;bestOf&rdquo;. (at last day of a week I have to choose &ldquo;bestOf&rdquo; event from 7 days)</li>
<li>Work with style to make better look of application .</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 17 - Application Details]]></title>
    <link href="http://lavrton.github.io/blog/2014/09/11/one-month-app-day-17-application-details/"/>
    <updated>2014-09-11T02:24:11+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/09/11/one-month-app-day-17-application-details</id>
    <content type="html"><![CDATA[<h2>Inspiration</h2>

<p>Why am I doing this application? I love GitHub&rsquo;s streaks and it&rsquo;s calendar widget. It motivates me a lot to make some new open source stuff. I liked <a href="http://lifehacker.com/281626/jerry-seinfelds-productivity-secret">&ldquo;don&rsquo;t break the chain&rdquo;</a> technique. I tried several services. But the technique has a HUGE DEMOTIVATION part when you break the chain. But calendar (as in GitHub) still motivates me. Because I don&rsquo;t want to save a chain only. I am also trying to make calendar as green, as possible. Breaking a chain is not very demotivating.</p>

<p>Inspired by apps:</p>

<ul>
<li><a href="https://chains.cc/">https://chains.cc/</a></li>
<li><a href="https://routinetap.com/">https://routinetap.com/</a> (not available now)</li>
<li><p><a href="http://aprilzero.com/">http://aprilzero.com/</a> and I am waiting his <a href="https://gyrosco.pe/">https://gyrosco.pe/</a> application.</p>

<p>  I thought to add &ldquo;number tracking&rdquo; (such as how many hours did I work today?), but now I&rsquo;m thinking it is really hard to track such questions manually. It looks like <a href="https://gyrosco.pe/">https://gyrosco.pe/</a> will help to track such data automatically. Boolean questions (&ldquo;Have I done a fitness?&rdquo;) are easier. Just done or not.</p></li>
</ul>


<!--more-->


<h2>BestOf technique</h2>

<p>Every day I should write what is the best or the most important has happened to me during the day. For example: finishing project ABC, participating in paintball tournament, had meeting with parents, etc. Sometimes I have very bad &ldquo;bestOf&rdquo; daily report, such as &ldquo;was in the shop&rdquo;. That means the day was bad for self-development.</p>

<p>Then when a week is over I have to choose one &ldquo;bestOf&rdquo; event of the week from 7 days. Then &ldquo;bestOf&rdquo; for a month, a quarter, and a year. This report is very interesting for me. Ones I had &ldquo;was in the shop&rdquo; bestOf for the week. The week was awful. So I had to make my next week better.</p>

<p>Also it is really interesting to watch results for a year! Many cool things are forgotten and memories can motivate me again.</p>

<p>Additionally one person suggested me &ldquo;day score&rdquo; technique. With &ldquo;bestOf&rdquo; for a day I am adding special score - color from red to green. Red - very bad day, yellow - usual day, green - good day, dark green - AWESOME day. And it is nice technique. Because sometimes you may have no interesting &ldquo;bestOf&rdquo; events, but the day might be still very good, for example spending very good time with children.</p>

<p>In 2013 I was storing this information in Evernote. In 2014 I started to use mind map <a href="http://slash-system.com">Slash System</a>.</p>

<p><img class="center" src="http://lavrton.github.io/images/slash-example.png" title="" ></p>

<p>Maybe special software will be more comfortable, so I want to develop it, and try to use. But I still think about interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 12 - First Minimal Version]]></title>
    <link href="http://lavrton.github.io/blog/2014/09/06/one-month-app-day-12-first-minimal-version/"/>
    <updated>2014-09-06T14:51:51+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/09/06/one-month-app-day-12-first-minimal-version</id>
    <content type="html"><![CDATA[<h2>Dashboard version 2</h2>

<p>I was thinking about new view for dashboard. Here is the sketch:</p>

<p><img class="center" src="http://lavrton.github.io/images/sketch-2-dash-1.jpg" title="" ></p>

<!--more-->


<p>Almost everything will be available on one page:</p>

<ul>
<li>Daily report inputs</li>
<li>&ldquo;Add new question&rdquo; component</li>
<li>Reports widget for questions and answers</li>
</ul>


<p>I found good repo that helps me build calendar widget <a href="http://kamisama.github.io/cal-heatmap/">http://kamisama.github.io/cal-heatmap/</a> (almost as GitHub widget).</p>

<p>My current version:</p>

<p><img class="center" src="http://lavrton.github.io/images/dash-2.png" title="" ></p>

<p>Building client side code (my, <code>React</code>, <code>cal-heatmap</code>, <code>d3</code>) into one file with <code>browserify</code> and <code>Grunt</code> is REALLY slow&hellip; <strong>Argh&hellip;.</strong>. And <code>Sails.JS</code> already using <code>Grunt</code> for all task, so switching to <code>gulp</code> might be bad idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 9 - Heroku Deploy]]></title>
    <link href="http://lavrton.github.io/blog/2014/09/03/one-month-app-day-9-heroku-deploy/"/>
    <updated>2014-09-03T12:56:31+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/09/03/one-month-app-day-9-heroku-deploy</id>
    <content type="html"><![CDATA[<p>Deployment to heroku was not very hard. I started from there <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction">https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction</a>. Then VERY helpful article about <code>heroku</code> and <code>sailsjs</code>: <a href="http://brentvatne.ca/deploy-sails-to-heroku/">http://brentvatne.ca/deploy-sails-to-heroku/</a>.</p>

<p>Now current version is available here: <a href="http://trackerio.herokuapp.com/">http://trackerio.herokuapp.com/</a>.</p>

<p>Now I need to create first useful version, so I&rsquo;d like to start to use it by myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 8]]></title>
    <link href="http://lavrton.github.io/blog/2014/09/02/one-month-app-day-8/"/>
    <updated>2014-09-02T10:11:26+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/09/02/one-month-app-day-8</id>
    <content type="html"><![CDATA[<p>Today I was implementing <code>don't break the chain</code> part. I have no problems with ReactJS. It is really easy to use it for me. But I feel that I am using it in wrong way. I need to find some articles about the best practises.</p>

<p>For example for now I have <code>App</code> class. It has <code>onDelete</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">onDelete</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">question</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">questions</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">question</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">questions</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="s2">&quot;Can&#39;t delete question from state. Has no such question.&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I pass this method into child component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// render function</span>
</span><span class='line'><span class="nx">QuestionList</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">questions</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">questions</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">onDelete</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">onDelete</span>  <span class="c1">// pass inside</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <code>QuestionList</code> also have children, and I need to pass <code>onDelete</code> method into them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">createItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">question</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">AnswerComponent</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">question</span> <span class="o">:</span> <span class="nx">question</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">onDelete</span> <span class="o">:</span> <span class="nx">that</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onDelete</span> <span class="c1">// pass inside again</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing same method twice looks very strange for me&hellip;</p>

<p>Currently I have this prototype:
<img class="center" src="http://lavrton.github.io/images/dash-proto-1.jpg" title="" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 6 - Sketch 1]]></title>
    <link href="http://lavrton.github.io/blog/2014/08/31/one-month-app-day-6-sketch-1/"/>
    <updated>2014-08-31T15:39:44+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/08/31/one-month-app-day-6-sketch-1</id>
    <content type="html"><![CDATA[<p>I spent a lot of time to discover sails framework. It looks like they are refactoring documentation pages. So it is really hard to find information. Many links are broken. Google and stackoverflow help me and I don&rsquo;t really like it.</p>

<p>Now I am on sketching state.</p>

<p>First module &ldquo;daily report&rdquo;:
<img class="center" src="http://lavrton.github.io/images/dash-sketch-1.jpg" title="" ></p>

<!--more-->


<p>Then &ldquo;storyline&rdquo;. It includes instagram, twitter (thinking about other services) messages:
<img class="center" src="http://lavrton.github.io/images/storyline-sketch-1.jpg" title="" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 3]]></title>
    <link href="http://lavrton.github.io/blog/2014/08/29/one-month-app-day-3/"/>
    <updated>2014-08-29T02:11:48+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/08/29/one-month-app-day-3</id>
    <content type="html"><![CDATA[<p>Today I was learning React work flow. It looks very easy. Documentation and examples are ample.</p>

<p>But I have some problems with SailsJS. Randomly I found how to create new models. Now I need to sync server and client models. It is very easy to read all models from server. But how to config listening of creating new models? I need an immediately notification to client side via socket. I need more time to learn it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Month App - Day 2]]></title>
    <link href="http://lavrton.github.io/blog/2014/08/27/one-month-app-day-2/"/>
    <updated>2014-08-27T11:14:45+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/08/27/one-month-app-day-2</id>
    <content type="html"><![CDATA[<p>First I created GitHub repo for the project. Repository is stored here: <a href="https://github.com/lavrton/tracker">https://github.com/lavrton/tracker</a>.</p>

<p>For a long time I was thinking about design. I am not a designer. It is really hard to me to work with css and huge html files. So bootstap looks very nice there. Also I found a lot of nice admin templates. But I want to build application with ReactJS, so using bootstrap (with jquery) is a bad idea (may be). I found bootstrap-react project. Don&rsquo;t want to use it.</p>

<!--more-->


<p>So I was searching for a new css framework. One of the first was Pure in google search &ldquo;css framework&rdquo;. Do you know what? It looks pretty nice and it has a lot of stars on github&hellip;</p>

<p>But I also found topcoat frameworks. And it looks awesome.</p>

<p>So I installed SailsJS framework, topcoat, react. I was very sad when I knew that WebStorm doesn&rsquo;t support <code>.jsx</code>!</p>

<p>Now I have to think more about first features and design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launching 1 Month App - Day 1]]></title>
    <link href="http://lavrton.github.io/blog/2014/08/26/launching-1-month-app/"/>
    <updated>2014-08-26T09:50:38+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/08/26/launching-1-month-app</id>
    <content type="html"><![CDATA[<h2>Prequel</h2>

<p>Today I want to launch a new project. I want to call it &ldquo;tracker.io - Life statistic&rdquo;.
The project is about statistic of your life and personal effectiveness.
I want to calculate such categories of my life:</p>

<ul>
<li>How many hours did I work today?</li>
<li>How many hours did I sleep?</li>
<li>&hellip;</li>
</ul>


<p>Also I&rsquo;d like to add &ldquo;Don&rsquo;t break the chain&rdquo; motivation technique:</p>

<ul>
<li>Fitness</li>
<li>Reading</li>
<li>Working with open source</li>
<li>&hellip;</li>
</ul>


<!--more-->


<p>One more thing I&rsquo;d like to include AWESOME motivation technique that I am already using last 1.5 years
(I will explain it in later posts).</p>

<p>So what is my purpose. I am going to build website that will help me store such data and visualize it.
Visualization is the most important part of the project.</p>

<p>I am going to build this service in one month. I am not sure is it long or short interval.
Just for definiteness and stimulus.</p>

<h2>Starting the project</h2>

<p>For a long time I was thinking about server side. Should I use it or not.
I love &ldquo;thick&rdquo; javascript client application that can do everything itself without server side.
Or with just different SAAS server side solution such as <code>Parse</code> or <code>Kinvey</code>.</p>

<p>But I think my application will store a lot of data.
And may be some parts of the visualisation will be generated on server side.
So using my own server will be easier in this case.</p>

<p>While searching nodejs framework (I just want to learn nodejs) I choose sails.js.
I don&rsquo;t need full-stack framework because I want to use React on client side.
And I don&rsquo;t want to do a lot of stuff by myself with <code>connect</code> or <code>express</code> frameworks.</p>

<p>I have 1 month to make a good product. The 26th of September is a deadline for <code>Tracker</code>. So let&rsquo;s go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Backbone With Html5 Canvas]]></title>
    <link href="http://lavrton.github.io/blog/2014/05/28/using-backbone-with-html5-canvas/"/>
    <updated>2014-05-28T09:31:43+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/05/28/using-backbone-with-html5-canvas</id>
    <content type="html"><![CDATA[<h2>1 Description of the problem</h2>

<p>While developing mind map application Slash System,
I chose Backbone as the main library to build an application.
The mind map is drawn into <code>&lt;canvas&gt;</code> element using various primitives.
We chose KineticJS (now it is <a href="http://konvajs.github.io/">Konva</a>) library to work with canvas,
as it perfectly supports events for objects on the canvas.</p>

<p>In order to match the architecture of Backbone, all work with canvas
(or rather with the object instances of <code>Konva</code>) occurred in <code>Backbone.View</code> instances:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Node</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">layer</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">bindEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">rect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Konva</span><span class="p">.</span><span class="nx">Rect</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">x</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">y</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">width</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">height</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">fill</span> <span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">id</span> <span class="o">:</span> <span class="s1">&#39;rect&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">rect</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">bindEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;on rectangle clicked&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// etc ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2 The problem</h2>

<p>But Backbone.View is designed to work with the DOM elements,
and this approach generates unnecessary div objects and also announcing of events
in a declarative style (<a href="http://backbonejs.org/#View-delegateEvents">http://backbonejs.org/#View-delegateEvents</a>) is not avalible.</p>

<h3>3 The solution</h3>

<p>I made plugin <a href="https://github.com/lavrton/backbone.konvaview">Backbone.KonvaView</a>,
which allows to work with objects on the canvas (via Konva) in the same style as the normal
<code>Backbone.View</code> works with DOM. An example of how the code looks now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">KineticView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">initialize</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">layer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">nodeType</span> <span class="o">:</span> <span class="s1">&#39;Rect&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">attributes</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">x</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">y</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">width</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">fill</span> <span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">id</span> <span class="o">:</span> <span class="s1">&#39;rect&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// setup events</span>
</span><span class='line'>    <span class="nx">events</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click&#39;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;on rectangle clicked&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">render</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">layer</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyView</span><span class="p">({</span><span class="nx">layer</span><span class="o">:</span><span class="nx">layer</span><span class="p">});</span>
</span><span class='line'><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This plugin works almost the same way as <code>Backbone.View</code>,
but only for Konva objects. By analogy tests were adapted from Backbone.View.</p>

<p>Slightly more complex live example can be found here: <a href="http://jsbin.com/fekex/5/edit?js,output">http://jsbin.com/fekex/5/edit?js,output</a></p>

<p>Plugin code: <a href="https://github.com/lavrton/backbone.konvaview">https://github.com/lavrton/backbone.konvaview</a></p>

<p>Perhaps a similar solution can be easily built for such canvas libraries: Easeljs, FabricJS etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix Android Html5 Canvas Issues]]></title>
    <link href="http://lavrton.github.io/blog/2014/05/03/how-to-fix-android-html5-canvas-issues/"/>
    <updated>2014-05-03T01:06:13+00:00</updated>
    <id>http://lavrton.github.io/blog/2014/05/03/how-to-fix-android-html5-canvas-issues</id>
    <content type="html"><![CDATA[<p>My post about fixing some html5 canvas problems on android devices.
<a href="http://slash-system.com/en/how-to-fix-android-html5-canvas-issues/">http://slash-system.com/en/how-to-fix-android-html5-canvas-issues/</a></p>
]]></content>
  </entry>
  
</feed>
